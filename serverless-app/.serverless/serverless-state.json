{
  "service": {
    "service": "tsw",
    "serviceObject": {
      "name": "tsw"
    },
    "provider": {
      "stage": "staging",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "runtime": "java8",
      "region": "eu-west-1",
      "timeout": 10,
      "vpc": {
        "securityGroupIds": [
          "sg-078b2e7c"
        ],
        "subnetIds": [
          "subnet-95035df2",
          "subnet-890424c0",
          "subnet-0457cc5f"
        ]
      },
      "environment": {
        "DB_HOST": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
        "DB_USER": "tswdatabase",
        "DB_PASSWORD": "2CBTqUSfIg6Fyx0ievkd",
        "DB_DATABASE": "tswdatabase",
        "DB_PORT": "5432"
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "MigrateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tsw-staging-migrate"
            }
          },
          "CreateDashuserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tsw-staging-create-user"
            }
          },
          "GetDashuserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tsw-staging-get-user"
            }
          },
          "CreateDashbuyDashorderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tsw-staging-create-buy-order"
            }
          },
          "CreateDashsellDashorderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tsw-staging-create-sell-order"
            }
          },
          "CreateDashconvertDashorderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tsw-staging-create-convert-order"
            }
          },
          "GetDashuserDashordersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/tsw-staging-get-user-orders"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "staging",
                        "tsw",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tsw-staging*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/tsw-staging*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "tsw",
                    "staging",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "MigrateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tsw/staging/1573429054447-2019-11-10T23:37:34.447Z/serverless-app-all.jar"
              },
              "FunctionName": "tsw-staging-migrate",
              "Handler": "com.getchange.tsw.platform.aws.MigrationHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "java8",
              "Timeout": 300,
              "Environment": {
                "Variables": {
                  "DB_HOST": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
                  "DB_USER": "tswdatabase",
                  "DB_PASSWORD": "2CBTqUSfIg6Fyx0ievkd",
                  "DB_DATABASE": "tswdatabase",
                  "DB_PORT": "5432"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-078b2e7c"
                ],
                "SubnetIds": [
                  "subnet-95035df2",
                  "subnet-890424c0",
                  "subnet-0457cc5f"
                ]
              }
            },
            "DependsOn": [
              "MigrateLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "MigrateLambdaVersionJUSskdqNNex0DbVP2pxAYSENbjDvJXteKSnwaIAVVrs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MigrateLambdaFunction"
              },
              "CodeSha256": "qI/AELdbETxEdVZIvcZPKzUfRHG5PwqsoVWwaD4fgSk="
            }
          },
          "CreateDashuserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tsw/staging/1573429054447-2019-11-10T23:37:34.447Z/serverless-app-all.jar"
              },
              "FunctionName": "tsw-staging-create-user",
              "Handler": "com.getchange.tsw.platform.aws.CreateUserHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "java8",
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
                  "DB_USER": "tswdatabase",
                  "DB_PASSWORD": "2CBTqUSfIg6Fyx0ievkd",
                  "DB_DATABASE": "tswdatabase",
                  "DB_PORT": "5432"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-078b2e7c"
                ],
                "SubnetIds": [
                  "subnet-95035df2",
                  "subnet-890424c0",
                  "subnet-0457cc5f"
                ]
              }
            },
            "DependsOn": [
              "CreateDashuserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateDashuserLambdaVersionzicE2uvn1iC8MVj8jCMiYxjiIrwXiL09c5uC8bT4RQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashuserLambdaFunction"
              },
              "CodeSha256": "qI/AELdbETxEdVZIvcZPKzUfRHG5PwqsoVWwaD4fgSk="
            }
          },
          "GetDashuserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tsw/staging/1573429054447-2019-11-10T23:37:34.447Z/serverless-app-all.jar"
              },
              "FunctionName": "tsw-staging-get-user",
              "Handler": "com.getchange.tsw.platform.aws.GetUserHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "java8",
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
                  "DB_USER": "tswdatabase",
                  "DB_PASSWORD": "2CBTqUSfIg6Fyx0ievkd",
                  "DB_DATABASE": "tswdatabase",
                  "DB_PORT": "5432"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-078b2e7c"
                ],
                "SubnetIds": [
                  "subnet-95035df2",
                  "subnet-890424c0",
                  "subnet-0457cc5f"
                ]
              }
            },
            "DependsOn": [
              "GetDashuserLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetDashuserLambdaVersionycBfwvwUszKL9lWQb6T4z7qXYwZgnya31AAim1QDv8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashuserLambdaFunction"
              },
              "CodeSha256": "qI/AELdbETxEdVZIvcZPKzUfRHG5PwqsoVWwaD4fgSk="
            }
          },
          "CreateDashbuyDashorderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tsw/staging/1573429054447-2019-11-10T23:37:34.447Z/serverless-app-all.jar"
              },
              "FunctionName": "tsw-staging-create-buy-order",
              "Handler": "com.getchange.tsw.platform.aws.CreateBuyOrderHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "java8",
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
                  "DB_USER": "tswdatabase",
                  "DB_PASSWORD": "2CBTqUSfIg6Fyx0ievkd",
                  "DB_DATABASE": "tswdatabase",
                  "DB_PORT": "5432"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-078b2e7c"
                ],
                "SubnetIds": [
                  "subnet-95035df2",
                  "subnet-890424c0",
                  "subnet-0457cc5f"
                ]
              }
            },
            "DependsOn": [
              "CreateDashbuyDashorderLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateDashbuyDashorderLambdaVersioncGlm8S3P26NZZyWfiFRqgwiFlHkOvfgSzJ6MtZBLDw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashbuyDashorderLambdaFunction"
              },
              "CodeSha256": "qI/AELdbETxEdVZIvcZPKzUfRHG5PwqsoVWwaD4fgSk="
            }
          },
          "CreateDashsellDashorderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tsw/staging/1573429054447-2019-11-10T23:37:34.447Z/serverless-app-all.jar"
              },
              "FunctionName": "tsw-staging-create-sell-order",
              "Handler": "com.getchange.tsw.platform.aws.CreateSellOrderHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "java8",
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
                  "DB_USER": "tswdatabase",
                  "DB_PASSWORD": "2CBTqUSfIg6Fyx0ievkd",
                  "DB_DATABASE": "tswdatabase",
                  "DB_PORT": "5432"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-078b2e7c"
                ],
                "SubnetIds": [
                  "subnet-95035df2",
                  "subnet-890424c0",
                  "subnet-0457cc5f"
                ]
              }
            },
            "DependsOn": [
              "CreateDashsellDashorderLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateDashsellDashorderLambdaVersionfVBT5y7H5YngCBb9FGkEmnHDjaaD5JVwubqZrSDYjJg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashsellDashorderLambdaFunction"
              },
              "CodeSha256": "qI/AELdbETxEdVZIvcZPKzUfRHG5PwqsoVWwaD4fgSk="
            }
          },
          "CreateDashconvertDashorderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tsw/staging/1573429054447-2019-11-10T23:37:34.447Z/serverless-app-all.jar"
              },
              "FunctionName": "tsw-staging-create-convert-order",
              "Handler": "com.getchange.tsw.platform.aws.CreateConvertOrderHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "java8",
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
                  "DB_USER": "tswdatabase",
                  "DB_PASSWORD": "2CBTqUSfIg6Fyx0ievkd",
                  "DB_DATABASE": "tswdatabase",
                  "DB_PORT": "5432"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-078b2e7c"
                ],
                "SubnetIds": [
                  "subnet-95035df2",
                  "subnet-890424c0",
                  "subnet-0457cc5f"
                ]
              }
            },
            "DependsOn": [
              "CreateDashconvertDashorderLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateDashconvertDashorderLambdaVersionr4xmME95V7sUoymCPGZOyZeJc6qghl3nerYp1ym30": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashconvertDashorderLambdaFunction"
              },
              "CodeSha256": "qI/AELdbETxEdVZIvcZPKzUfRHG5PwqsoVWwaD4fgSk="
            }
          },
          "GetDashuserDashordersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/tsw/staging/1573429054447-2019-11-10T23:37:34.447Z/serverless-app-all.jar"
              },
              "FunctionName": "tsw-staging-get-user-orders",
              "Handler": "com.getchange.tsw.platform.aws.GetUserOrdersHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "java8",
              "Timeout": 10,
              "Environment": {
                "Variables": {
                  "DB_HOST": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
                  "DB_USER": "tswdatabase",
                  "DB_PASSWORD": "2CBTqUSfIg6Fyx0ievkd",
                  "DB_DATABASE": "tswdatabase",
                  "DB_PORT": "5432"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": [
                  "sg-078b2e7c"
                ],
                "SubnetIds": [
                  "subnet-95035df2",
                  "subnet-890424c0",
                  "subnet-0457cc5f"
                ]
              }
            },
            "DependsOn": [
              "GetDashuserDashordersLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetDashuserDashordersLambdaVersionP3nhcgiv43nLm7LexyoLr0pgI09Rk5xXIQjuhOHBXek": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashuserDashordersLambdaFunction"
              },
              "CodeSha256": "qI/AELdbETxEdVZIvcZPKzUfRHG5PwqsoVWwaD4fgSk="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "staging-tsw",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "orders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrdersBuy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "PathPart": "buy",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrdersSell": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "PathPart": "sell",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrdersConvert": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "PathPart": "convert",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrdersUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrdersUserIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceOrdersUser"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDashuserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashuserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodOrdersBuyPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrdersBuy"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDashbuyDashorderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodOrdersSellPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrdersSell"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDashsellDashorderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodOrdersConvertPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrdersConvert"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDashconvertDashorderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodOrdersUserIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrdersUserIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashuserDashordersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1573429053080": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "staging"
            },
            "DependsOn": [
              "ApiGatewayMethodUsersPost",
              "ApiGatewayMethodUsersIdVarGet",
              "ApiGatewayMethodOrdersBuyPost",
              "ApiGatewayMethodOrdersSellPost",
              "ApiGatewayMethodOrdersConvertPost",
              "ApiGatewayMethodOrdersUserIdVarGet"
            ]
          },
          "CreateDashuserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashuserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashuserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashuserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateDashbuyDashorderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashbuyDashorderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateDashsellDashorderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashsellDashorderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateDashconvertDashorderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashconvertDashorderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetDashuserDashordersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashuserDashordersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "MigrateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MigrateLambdaVersionJUSskdqNNex0DbVP2pxAYSENbjDvJXteKSnwaIAVVrs"
            }
          },
          "CreateDashuserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashuserLambdaVersionzicE2uvn1iC8MVj8jCMiYxjiIrwXiL09c5uC8bT4RQ"
            }
          },
          "GetDashuserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashuserLambdaVersionycBfwvwUszKL9lWQb6T4z7qXYwZgnya31AAim1QDv8"
            }
          },
          "CreateDashbuyDashorderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashbuyDashorderLambdaVersioncGlm8S3P26NZZyWfiFRqgwiFlHkOvfgSzJ6MtZBLDw"
            }
          },
          "CreateDashsellDashorderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashsellDashorderLambdaVersionfVBT5y7H5YngCBb9FGkEmnHDjaaD5JVwubqZrSDYjJg"
            }
          },
          "CreateDashconvertDashorderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashconvertDashorderLambdaVersionr4xmME95V7sUoymCPGZOyZeJc6qghl3nerYp1ym30"
            }
          },
          "GetDashuserDashordersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashuserDashordersLambdaVersionP3nhcgiv43nLm7LexyoLr0pgI09Rk5xXIQjuhOHBXek"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/staging"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:aws:s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "stages": [
        "staging",
        "prod"
      ],
      "dbHost": {
        "staging": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com",
        "prod": "tswdatabase2.cluster-cnqasrsgtev6.eu-west-1.rds.amazonaws.com"
      },
      "dbUser": {
        "staging": "tswdatabase",
        "prod": "tswdatabase"
      },
      "dbPassword": {
        "staging": "2CBTqUSfIg6Fyx0ievkd",
        "prod": null
      },
      "dbDatabase": {
        "staging": "tswdatabase",
        "prod": "tswdatabase"
      },
      "dbPort": {
        "staging": "5432",
        "prod": "5432"
      }
    },
    "plugins": [
      "serverless-stage-manager"
    ],
    "pluginsData": {},
    "functions": {
      "migrate": {
        "handler": "com.getchange.tsw.platform.aws.MigrationHandler",
        "timeout": 300,
        "events": [],
        "name": "tsw-staging-migrate",
        "package": {},
        "memory": 1024,
        "runtime": "java8",
        "vpc": {}
      },
      "create-user": {
        "handler": "com.getchange.tsw.platform.aws.CreateUserHandler",
        "events": [
          {
            "http": {
              "path": "users",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tsw-staging-create-user",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "java8",
        "vpc": {}
      },
      "get-user": {
        "handler": "com.getchange.tsw.platform.aws.GetUserHandler",
        "events": [
          {
            "http": {
              "path": "users/{id}",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.path.id": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tsw-staging-get-user",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "java8",
        "vpc": {}
      },
      "create-buy-order": {
        "handler": "com.getchange.tsw.platform.aws.CreateBuyOrderHandler",
        "events": [
          {
            "http": {
              "path": "orders/buy",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tsw-staging-create-buy-order",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "java8",
        "vpc": {}
      },
      "create-sell-order": {
        "handler": "com.getchange.tsw.platform.aws.CreateSellOrderHandler",
        "events": [
          {
            "http": {
              "path": "orders/sell",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tsw-staging-create-sell-order",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "java8",
        "vpc": {}
      },
      "create-convert-order": {
        "handler": "com.getchange.tsw.platform.aws.CreateConvertOrderHandler",
        "events": [
          {
            "http": {
              "path": "orders/convert",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tsw-staging-create-convert-order",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "java8",
        "vpc": {}
      },
      "get-user-orders": {
        "handler": "com.getchange.tsw.platform.aws.GetUserOrdersHandler",
        "events": [
          {
            "http": {
              "path": "orders/user/{id}",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.path.id": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "tsw-staging-get-user-orders",
        "package": {},
        "memory": 1024,
        "timeout": 10,
        "runtime": "java8",
        "vpc": {}
      }
    },
    "serviceFilename": "serverless.yml",
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/tsw/staging/1573429054447-2019-11-10T23:37:34.447Z",
    "artifact": "serverless-app-all.jar"
  }
}